/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package vistas;

import hibernateUtil.Conexion;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.swing.DefaultCellEditor;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableColumn;
import novedades.dao.imp.ConceptoDaoImp;
import novedades.dao.imp.EmpleadoDaoImp;
import novedades.dao.imp.NovedadDaoImp;
import novedades.dao.imp.UsuarioDaoImp;
import org.hibernate.Session;
import pojo.Concepto;
import pojo.Empleado;
import pojo.Novedad;
import pojo.Usuario;
import util.FechaUtil;
import util.HoraServer;

/**
 *
 * @author LEO
 */


public class cargaNovedades extends javax.swing.JDialog {
    private DefaultTableModel modelo;
    private Empleado e = new Empleado();
    private Novedad novedad = new Novedad();
    private Concepto c= new Concepto();
    private Usuario usuario= new Usuario();
    int legajo = 0;
    String auxCant;
    String auxObs;
    String auxCon;
    String tipo;
    Date fecha;
    Date date = new Date();
    String hoy;
    DateFormat df = DateFormat.getDateInstance();
    Date ultimaCarga;
    HoraServer hs = new HoraServer();
    SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
    JComboBox jcb = new JComboBox();
    JTextField jtf = new JTextField();
               
   public cargaNovedades(java.awt.Frame parent, boolean modal, Usuario usuario) {
        super(parent, modal);
        initComponents();
        this.usuario = usuario;
        cargarTablaNovedades();
        btnCargar.setEnabled(false);
//        hoy = FechaUtil.getFechaString11AAAAMMDD(date);
//        hoy = hs.getFecha();
        cargo();
        llenaJComboBoxInvestigacion();
        
        jtf.addKeyListener(new KeyListener() {

            @Override
            public void keyTyped(KeyEvent e) {
                permitirSoloNumero(e);
            }

            @Override
            public void keyPressed(KeyEvent e) {
                permitirSoloNumero(e);
            }

            @Override
            public void keyReleased(KeyEvent e) {
                permitirSoloNumero(e);
            }
            private void permitirSoloNumero(java.awt.event.KeyEvent evt) {
          // permitir solo el ingreso de numero
                char caracter = evt.getKeyChar();
                if(((caracter < '0') ||(caracter > '9')) && (caracter != '\b' /*corresponde a BACK_SPACE*/)){
                evt.consume();  // ignorar el evento de teclado
                }
            }
        });


        
        TableColumn tc = tblNovedadesUsr.getColumnModel().getColumn(5);
        TableCellEditor tce = new DefaultCellEditor(jcb);
        tc.setCellEditor(tce);
        
        TableColumn tc2 = tblNovedadesUsr.getColumnModel().getColumn(6);
        TableCellEditor tce2 = new DefaultCellEditor(jtf);
        tc2.setCellEditor(tce2);
        
        hs = new HoraServer();
        String hora = hs.getDate_Full();
        tblNovedadesUsr.setAutoCreateRowSorter(true);
//        lblFecha.setText(sdf.format(date));
        lblFecha.setText(hs.getFecha());
        ultimaCarga = new Date(sdf.format(date));
        lblEmpresa.setText(usuario.getEmpleado().getSucursal().getEmpresa().getCodEmp()+"-"+usuario.getEmpleado().getSucursal().getEmpresa().getNombre());
        lblSucursal.setText(usuario.getEmpleado().getSucursal().getCodSuc()+"-"+usuario.getEmpleado().getSucursal().getNombre());
        Date fecha = util.FechaUtil.getFechaSinhora(date);
        setLocationRelativeTo(this);
        setVisible(true);
        usuario.setUltimoIngreso(new Date());
        
    }   
   
   
           
//    public cargaNovedades(){
//        
//    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panel1 = new org.edisoncor.gui.panel.Panel();
        btnCargar = new org.edisoncor.gui.button.ButtonIpod();
        btnSalir = new org.edisoncor.gui.button.ButtonIpod();
        lblFecha = new org.edisoncor.gui.label.LabelMetric();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblNovedadesUsr = new javax.swing.JTable();
        lblEmpresa = new org.edisoncor.gui.label.LabelMetric();
        lblSucursal = new org.edisoncor.gui.label.LabelMetric();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        panel1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        panel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/perseids_tudorica.gif"))); // NOI18N

        btnCargar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/cargar.png"))); // NOI18N
        btnCargar.setText("Cargar");
        btnCargar.setDistanciaDeSombra(45);
        btnCargar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCargarActionPerformed(evt);
            }
        });
        btnCargar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnCargarKeyPressed(evt);
            }
        });

        btnSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/atras.png"))); // NOI18N
        btnSalir.setText("Salir");
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });

        lblFecha.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);

        tblNovedadesUsr.setBackground(new java.awt.Color(0, 0, 0));
        tblNovedadesUsr.setForeground(new java.awt.Color(255, 255, 255));
        tblNovedadesUsr.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "LEGAJO", "APELLIDO", "NOMBRE", "NOVEDAD", "CANTIDAD", "OBSERVACION"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Long.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tblNovedadesUsr.getTableHeader().setReorderingAllowed(false);
        tblNovedadesUsr.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tblNovedadesUsrKeyTyped(evt);
            }
        });
        jScrollPane2.setViewportView(tblNovedadesUsr);

        lblEmpresa.setFont(new java.awt.Font("Bookman Old Style", 1, 18)); // NOI18N
        lblEmpresa.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        lblSucursal.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        lblSucursal.setFont(new java.awt.Font("Bookman Old Style", 1, 18)); // NOI18N

        javax.swing.GroupLayout panel1Layout = new javax.swing.GroupLayout(panel1);
        panel1.setLayout(panel1Layout);
        panel1Layout.setHorizontalGroup(
            panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel1Layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel1Layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(lblSucursal, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(panel1Layout.createSequentialGroup()
                        .addComponent(lblEmpresa, javax.swing.GroupLayout.PREFERRED_SIZE, 306, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblFecha, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(59, 59, 59))
                    .addGroup(panel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnCargar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(183, 183, 183)
                        .addComponent(btnSalir, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(216, 216, 216))
                    .addGroup(panel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 683, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(46, Short.MAX_VALUE))))
        );
        panel1Layout.setVerticalGroup(
            panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblFecha, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblEmpresa, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(lblSucursal, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(63, 63, 63)
                .addGroup(panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCargar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSalir, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(17, Short.MAX_VALUE))
        );

        lblEmpresa.getAccessibleContext().setAccessibleName("3 - FERNANDO MANZUR SUCURSAL");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(panel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnSalirActionPerformed

    private void btnCargarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCargarActionPerformed
        try{
            
        ArrayList nov = null;
        Session session = Conexion.getSession();
        session.beginTransaction();
//        String sql = "from Novedad as n join fetch n.empleado as e where e.legajo = '"+tblNovedadesUsr.getValueAt(0, 1)+"' and n.fecha = '"+lblFecha.getText()+"'";
        String sql = "from Novedad as n join fetch n.empleado as e where e.legajo = '"+tblNovedadesUsr.getValueAt(0, 1)+"' and n.fecha = '"+hs.getFecha()+"'";
        nov = (ArrayList)session.createQuery(sql).list();
        session.getTransaction().commit();
        session.close();
            
        if (nov.isEmpty()){
            if(tblNovedadesUsr.isEditing()){
                tblNovedadesUsr.getCellEditor().stopCellEditing();

                for(int i = 0;i < tblNovedadesUsr.getRowCount();i++){
                    getDatosTabla(i);
                    novedad.setFecha(FechaUtil.getFechaSinhora(date));
                    usuario.setCargo(true);
                    new NovedadDaoImp().addNovedad(novedad);
                    new UsuarioDaoImp().upDateUsuario(usuario);
                }
                
                JOptionPane.showMessageDialog(rootPane, "SE CARGARON DATOS CORRECTAMENTE");
            }else{
                for(int i = 0;i < tblNovedadesUsr.getRowCount();i++){
                    getDatosTabla(i);
                    novedad.setFecha(date);
                    usuario.setCargo(true);
                    new NovedadDaoImp().addNovedad(novedad);
                    new UsuarioDaoImp().upDateUsuario(usuario);
                }
                
                JOptionPane.showMessageDialog(rootPane, "SE CARGARON DATOS CORRECTAMENTE");
            }
        }else{
            JOptionPane.showMessageDialog(rootPane, "LOS DATOS YA FUERON CARGADOS ANTERIORMENTE, INTENTE MAÑANA NUEVAMENTE");
            cargarTablaNovedadesCompleta();
        }
        usuario.setCargo(true);
        this.dispose();
     }catch(NullPointerException ex){

     }
            btnCargar.setEnabled(false);

    }//GEN-LAST:event_btnCargarActionPerformed

    private void btnCargarKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnCargarKeyPressed
        
    }//GEN-LAST:event_btnCargarKeyPressed

    private void tblNovedadesUsrKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblNovedadesUsrKeyTyped
        permitirSoloNumero(evt);
    }//GEN-LAST:event_tblNovedadesUsrKeyTyped

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private org.edisoncor.gui.button.ButtonIpod btnCargar;
    private org.edisoncor.gui.button.ButtonIpod btnSalir;
    private javax.swing.JScrollPane jScrollPane2;
    private org.edisoncor.gui.label.LabelMetric lblEmpresa;
    private org.edisoncor.gui.label.LabelMetric lblFecha;
    private org.edisoncor.gui.label.LabelMetric lblSucursal;
    private org.edisoncor.gui.panel.Panel panel1;
    private javax.swing.JTable tblNovedadesUsr;
    // End of variables declaration//GEN-END:variables

    
    private void permitirSoloNumero(java.awt.event.KeyEvent evt) {
          // permitir solo el ingreso de numero
                char caracter = evt.getKeyChar();
                if(((caracter < '0') ||(caracter > '9')) && (caracter != '\b' /*corresponde a BACK_SPACE*/)){
                evt.consume();  // ignorar el evento de teclado
            }
    }
    
    private void getDatosTabla(int i){
        auxCant = (String) tblNovedadesUsr.getValueAt(i, 6);
        auxObs = (String) tblNovedadesUsr.getValueAt(i, 7);
        e = new EmpleadoDaoImp().getEmpleado(Integer.parseInt(tblNovedadesUsr.getValueAt(i, 1).toString()));
        novedad.setEmpleado(e);
        c = new ConceptoDaoImp().getConceptoHql(String.valueOf(tblNovedadesUsr.getValueAt(i, 5).toString()));
        novedad.setConcepto(c);
        auxCon = c.getTipo();
        novedad.setQuien(usuario.getUsuario()+" "+hs.getFechaHora());
        novedad.setEstado(false);
        if((auxCant != null && !auxCant.equals("")) && auxCon.equals("CUANTITATIVA")){
            novedad.setCantidad(Integer.parseInt(tblNovedadesUsr.getValueAt(i, 6).toString()));
        }else{
            novedad.setCantidad(0);
        }
        if (auxObs == null || "".equals(auxObs)){
           novedad.setObservacion("-"); 
        }else{
            novedad.setObservacion(tblNovedadesUsr.getValueAt(i, 7).toString());
        }
        
    }
    
        private void getDatosTablaNew(int i){
            
            auxCant = (String) tblNovedadesUsr.getValueAt(i, 6);
            auxObs = (String) tblNovedadesUsr.getValueAt(i, 7);
            e = new EmpleadoDaoImp().getEmpleado(Integer.parseInt(tblNovedadesUsr.getValueAt(i, 1).toString()));
            novedad.setEmpleado(e);
            c = new ConceptoDaoImp().getConceptoHql(String.valueOf(tblNovedadesUsr.getValueAt(i, 5).toString()));
            novedad.setConcepto(c);
            novedad.setQuien(usuario.getUsuario()+" "+hs.getFechaHora());
            novedad.setEstado(false);
            if(auxCant == null || "".equals(auxCant)){
                novedad.setCantidad(0);
            }else{
                novedad.setCantidad(Integer.parseInt(tblNovedadesUsr.getValueAt(i, 6).toString()));
            }

            if (auxObs == null || "".equals(auxObs)){
               novedad.setObservacion("-"); 
            }else{
                novedad.setObservacion(tblNovedadesUsr.getValueAt(i, 7).toString());
            }
        
        }
        public static boolean isCuantitativa(String c){
            if("CUANTITATIVA".equals(c)){
                return true;
            }else{
                return false;
            }
        }
    
   public void llenaJComboBoxInvestigacion() {
        Session session = null;
        try {
            if (usuario.getTipo().equals("COMUN")){
                session = Conexion.getSession();
                session.beginTransaction();
                String sql = "from Concepto as c\n" +
                             "where c.estado = true and c.cargaUser = true";
                List<Concepto> lisCon = session.createQuery(sql).list();
                session.getTransaction().commit();
                session.close();
                
                for (Concepto inv : lisCon){
                    jcb.addItem(inv.getDescripcion());
                }
                
                session.close();
            }else{
                session = Conexion.getSession();
                session.beginTransaction();
                String sql = "from Concepto as c\n" +
                             "where c.estado = true";
                List<Concepto> lisCon = session.createQuery(sql).list();
                session.getTransaction().commit();
                jcb.removeAllItems();
               
                for (Concepto inv : lisCon) {
                    jcb.addItem(inv.getDescripcion());
                }
                session.close();
            }
        }catch (Exception e) {
        }
   }
   
  
   private void cargarTablaNovedades(){
        List<Empleado> listaEmpleado = new EmpleadoDaoImp().listarEmpleado(usuario.getEmpleado().getSucursal().getEmpresa().getCodEmp(), usuario.getEmpleado().getSucursal().getCodSuc());
        util.TablaUtil.prepararTablaNovedades(modelo, tblNovedadesUsr, tipo);
        util.TablaUtil.cargarModeloNovedades(modelo, listaEmpleado, tblNovedadesUsr);
        
    }

    private void cargarTablaNovedadesCompleta() {
        String fech = hs.getFechaInvert();
        List<Novedad> listaEmpleado = new NovedadDaoImp().listarNovedad(fech, usuario.getEmpleado().getSucursal().getCodSuc());
        util.TablaUtil.prepararTablaCargaRRHH(modelo, tblNovedadesUsr);
        util.TablaUtil.cargarNovedadesCompleta(modelo, listaEmpleado, tblNovedadesUsr);
    }
    
    private void cargo(){//RESTRINGE LA CARGA DE NOVEDADES SI ES QUE NO HAY NOVEDADES AUN
        List<Novedad> nov;
        hoy = hs.getFechaInvert();
        Session session = Conexion.getSession();
        session.beginTransaction();
        String sql = "from Novedad as n "
                     + "join fetch n.empleado as e "
                     + "join fetch e.sucursal as s "
                     + "where e.estado = true and n.fecha = '"+hoy+"' and s.codSuc = '"+usuario.getEmpleado().getSucursal().getCodSuc()+"'";
        nov = (List<Novedad>)session.createQuery(sql).list();
        session.getTransaction().commit();
        session.close();

        if (nov.isEmpty()){
            btnCargar.setEnabled(true);
        }else{
            JOptionPane.showMessageDialog(rootPane, "LOS DATOS YA FUERON CARGADOS ANTERIORMENTE, INTENTE MAÑANA NUEVAMENTE");
            
            cargarTablaNovedadesCompleta();
        }
    }
  
}